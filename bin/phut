#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rubygems'
require 'bundler'
Bundler.setup :default

require 'gli'
require 'phut'
require 'pry'

module Phut
  # /bin/phut command
  module App
    extend GLI::App

    program_desc 'Virtual network in seconds'

    version Phut::VERSION

    desc 'Be verbose'
    switch %i[v verbose], negatable: false

    command :shell do |c|
      c.desc 'Location to put pid files'
      c.flag %i[P pid_dir], default_value: Phut.pid_dir
      c.desc 'Location to put log files'
      c.flag %i[L log_dir], default_value: Phut.log_dir
      c.desc 'Location to put socket files'
      c.flag %i[S socket_dir], default_value: Phut.socket_dir

      c.action do |_global_options, options, _args|
        Phut.pid_dir = options.fetch(:pid_dir)
        Phut.log_dir = options.fetch(:log_dir)
        Phut.socket_dir = options.fetch(:socket_dir)

        Pry.prompt = [proc { 'phut> ' },
                      proc { 'phut* ' }]

        include Phut
        pry
      end
    end

    desc 'Starts a virtual network'
    arg_name 'FILE'
    command :run do |c|
      c.desc 'Location to put pid files'
      c.flag %i[P pid_dir], default_value: Phut.pid_dir
      c.desc 'Location to put log files'
      c.flag %i[L log_dir], default_value: Phut.log_dir
      c.desc 'Location to put socket files'
      c.flag %i[S socket_dir], default_value: Phut.socket_dir

      c.action do |_global_options, options, args|
        Phut.pid_dir = options.fetch(:pid_dir)
        Phut.log_dir = options.fetch(:log_dir)
        Phut.socket_dir = options.fetch(:socket_dir)

        Phut::Parser.new(args[0]).parse
      end
    end

    desc 'Stops a virtual network'
    command :stop do |c|
      c.desc 'Location to put socket files'
      c.flag %i[S socket_dir], default_value: Phut.socket_dir

      c.action do |_global_options, options, _args|
        Phut.socket_dir = options.fetch(:socket_dir)

        Phut::Vswitch.destroy_all
        Phut::Vhost.destroy_all
        Phut::Netns.destroy_all
        Phut::Link.destroy_all
      end
    end

    pre do |global, _command, _options, _args|
      if global[:version]
        puts "#{exe_name} version #{version_string}"
        exit_now! nil, 0
      end

      if global[:verbose]
        ENV['GLI_DEBUG'] = 'true'
        Phut.logger.level = Logger::DEBUG
      end

      true
    end

    default_command :shell

    exit run(ARGV)
  end
end
